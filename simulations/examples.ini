[General]
scheduler-class = MatlabScheduler
sim-time-limit = 60s
simtime-resolution = ps
seed-set = 1

# statistics recording
**.ncsContext.*.statistic-recording = true
**.ncsContext.*.result-recording-modes = all
**.controller.cps.inter_arrival_time.statistic-recording = true
**.controller.cps.inter_arrival_time.result-recording-modes = all
**.sensor.cps.inter_arrival_time.statistic-recording = true
**.sensor.cps.inter_arrival_time.result-recording-modes = all
**.actuator.cps.inter_arrival_time.statistic-recording = false

**.ncs*.contextType = "CoCpnNcsContext"
**.ncs*.ncsContext.startupDelay = 5s

# Always use UDP
**.ncs*.*.useTcp = false
**.ncs*.*.useUdp = true
# alternatively: TCP with datagram-style message wrapper
# **.ncs*.*.tcpTransport.datagramService = true 


[Config TheoreticalModel]
network = TheoreticalNcs

TheoreticalNcs.ncs.ncsContext.configFile = "../../libncs_matlab/matlab/config/double_integrator.mat"

**.actorLink.pdf = "0.1:0.1 0.2:0.2 0.3:0.2 0.4:0.15 0.5:0.1 0.6:0.05 0.7:0.02 0.8:0.0200 0.9:0.02 -1:0.14"
**.sensorLink.pdf = "0.1:0.1 0.2:0.2 0.3:0.2 0.4:0.15 0.5:0.1 0.6:0.05 0.7:0.02 0.8:0.0200 0.9:0.02 -1:0.14"

**.actorLink.*.statistic-recording = true
**.actorLink.*.result-recording-modes = all
**.sensorLink.*.statistic-recording = true
**.sensorLink.*.result-recording-modes = all

[Config SimpleNetworkModel]
network = SimpleNcs

SimpleNcs.ncs.ncsContext.configFile = "../../libncs_matlab/matlab/config/double_integrator_eth.mat"

SimpleNcs.bottleneckLineRate = ${bottleneckLineRate = 10}Mbps #100Mbps
**.channel.ber = 10^-8 # 100Base-T
**.channel.delay = replaceUnit(10m / (2 * 10^8), "s")
SimpleNcs.maxQueueDelay = ${maxQueueDelay = 0.1}s # fake variable to enable subsequent computations
SimpleNcs.r*.ppp[*].queue.frameCapacity = (${maxQueueDelay} * ${bottleneckLineRate} * 10^6 / 12000)
SimpleNcs.crossFlowRate = 0.99 * ${bottleneckLineRate}Mbps
SimpleNcs.crossHost*.app.gen.startTime = 20s
SimpleNcs.crossHost*.app.gen.stopTime = 40s
