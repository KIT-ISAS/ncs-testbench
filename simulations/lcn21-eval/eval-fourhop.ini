#
# Simulation configuration for MultihopNcs
#

[General]
scheduler-class = MatlabScheduler
simtime-resolution = ps
seed-set = ${repetition}
#debug-on-errors = true
result-dir = results-fourhop

record-eventlog = false
# revert to old result naming scheme
output-vector-file = "${resultdir}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}-${runnumber}.sca"
eventlog-file = "${resultdir}/${configname}-${runnumber}.elog"
snapshot-file = "${resultdir}/${configname}-${runnumber}.sna"


#
# Default Setup
#

network = ncs_testbench.networks.FourHopNcs

sim-time-limit = 90s
warmup-period = ${warmupPeriod = 30s}
*.networkSetupTime = ${warmupPeriod} - 10s + uniform(-1.0, 1.0) * 1s #slightly randomize to avoid losses
*.ncsStartupDelay = ${warmupPeriod}
*.ncsStartupOffset = 2.001s # stagger start to avoid synchronization effects


#
# Statistics Recording
#

# NCS statistics
**.ncsContext.*.statistic-recording = true
**.ncsContext.*.result-recording-modes = vector

# Mock statistics
*Ncs.ncs*.ncsContext.ncs.*.statistic-recording = true
*Ncs.ncs*.ncsContext.ncs.*.result-recording-modes = vector

# CoCC statistics
**.actuator.coCC.*.statistic-recording = false
**.sensor.coCC.*.statistic-recording = false
**.controller.coCC.*.statistic-recording = true
**.controller.coCC.*.result-recording-modes = vector
**.CoCCSerumHandler.*.statistic-recording = true
**.CoCCSerumHandler.*.result-recording-modes = vector

# OracleCC statistics
**.actuator.oracleCC.*.statistic-recording = false
**.sensor.oracleCC.*.statistic-recording = false
**.controller.oracleCC.*.statistic-recording = true
**.controller.oracleCC.*.result-recording-modes = vector

# Monitoring statistics
*Ncs.ic*.monitoringCollector.ppp0-*.statistic-recording = true
*Ncs.ic*.monitoringCollector.ppp0-*.result-recording-modes = vector
*Ncs.ic*.monitoringCollector.ppp1-*.statistic-recording = true
*Ncs.ic*.monitoringCollector.ppp1-*.result-recording-modes = vector

*Ncs.ncs*.controller.monitoringCollector.*.statistic-recording = true
*Ncs.ncs*.controller.monitoringCollector.*.result-recording-modes = vector

# disable some chatty statistics which are not of interest
**.lo0.**.statistic-recording = false
**.networkLayer.**.statistic-recording = false
**.udp.*.statistic-recording = false
**.tcp.recordStats = false
**.tcp.*.statistic-recording = false
# do not log router traffic for non-bottleneck-interfaces
**.ppp[2..].**.statistic-recording = false
# do not log router classifier state
**.ic*.ppp[*].queue.classifier.*.statistic-recording = false
# do not log cross traffic
**.*Host*[*].**.statistic-recording = false


#
# Mute additional statistics which are mostly of interest for debugging
#
[Config EvalStatisticsOnly]
# do not log CPS queuing state (is not of concern)
**.ncs*.*.ppp[0].queue.*.statistic-recording = false
# do not log CPS ppp state
**.ncs*.*.ppp[0].ppp.*.statistic-recording = false
# do not log router ppp state
**.ic*.ppp[0].ppp.*.statistic-recording = false
# do not log not required NCS stats
**.ncs*.ncsContext.meas_sent.statistic-recording = false
**.ncs*.ncsContext.control_seq_sent.statistic-recording = false
**.ncs*.ncsContext.actuator_ack_sent.statistic-recording = false
**.ncs*.ncsContext.estimated_control_error.statistic-recording = false
**.ncs*.ncsContext.reported_QoC.statistic-recording = false
**.ncs*.ncsContext.reported_QM.statistic-recording = false


#
#
# Basic (modular) setup components, can be mainly used plug-in style
#

# Use UDP transport
[Config Sim_UDP]
*.ncs*.*.useTcp = false
*.ncs*.*.useUdp = true

# Use CoCPN NCS-Context and additional features
[Config CoCPN]
**.ncs*.contextType = "CoCpnNcsContext"

*Ncs.ic*.monitoring = false

# Enable CoCC and supporting mechanisms (monitoring, SERUM)
[Config CoCC]
extends=CoCPN

*.ncs*.*.useUdp = true
*.ncs*.*.useCoCC = true

*Ncs.ic*.ppp[*].queueType = "CoCCQueue"
*Ncs.**.serumSupport.handlers = "libncs_omnet.CoCC.CoCCSerumHandler"

*Ncs.**.monitoring = true
*Ncs.**.monitoringCollector.collectionInterval = ${collectionInterval = 0.05}s
*Ncs.ic*.networkLayer.serumSupport.CoCCSerumHandler.collectionInterval = ${collectionInterval}s
*Ncs.ncs*.*.networkLayer.serumSupport.*.collectionInterval = ${collectionInterval}s #not actually used yet
*Ncs.**.coCC.collectionInterval = ${collectionInterval}s
*Ncs.**.coCC.maxPushPathDelay = 0.01s

# Enable OracleCC and supporting mechanisms (monitoring, SERUM)
[Config OracleCC]
extends=CoCPN

*.ncs*.*.useUdp = true
*.useOracleCC = true
*.ncs*.*.useOracleCC = true

*Ncs.ic*.ppp[*].queueType = "CoCCQueue"
*Ncs.**.serumSupport.handlers = "libncs_omnet.OracleCC.OracleCCSerumHandler"

*Ncs.**.monitoring = true
*Ncs.**.monitoringCollector.collectionInterval = ${collectionInterval = 0.05}s
*Ncs.ncs*.*.networkLayer.serumSupport.*.collectionInterval = ${collectionInterval}s #not actually used yet

*Ncs.oracleCCCoordinator.minUpdateInterval = 5ms

[Config CCCombined]
extends=CoCPN

*Ncs.ccMode = ${ccMode = 1} # 0: off, 1: CoCC, 1: OracleCC 

*.ncs*.*.useUdp = true
*.ncs*.*.useCoCC = ${ccMode} == 1
*.useOracleCC = ${ccMode} == 2
*.ncs*.*.useOracleCC = ${ccMode} == 2

*Ncs.ic*.ppp[*].queueType = ${ccMode} != 0 ? "CoCCQueue" : "DropTailQueue"
*Ncs.**.serumSupport.handlers = ${ccMode} == 2 ? "libncs_omnet.OracleCC.OracleCCSerumHandler" : "libncs_omnet.CoCC.CoCCSerumHandler"

*Ncs.**.monitoring = true
*Ncs.**.monitoringCollector.collectionInterval = ${collectionInterval = 0.05}s
*Ncs.ic*.networkLayer.serumSupport.CoCCSerumHandler.collectionInterval = ${collectionInterval}s
*Ncs.ncs*.*.networkLayer.serumSupport.*.collectionInterval = ${collectionInterval}s #not actually used yet
*Ncs.**.coCC.collectionInterval = ${collectionInterval}s
*Ncs.**.coCC.maxPushPathDelay = 0.01s
#*Ncs.**.coCC.maxPushPathDelay = 0.0012s # close to min path delay, but will not work if push is done into priority queue

*Ncs.oracleCCCoordinator.minUpdateInterval = 5ms


#
# Network Scenarios
#

# realistic network parameters
[Config NetwEthernet]
**.*Link*.ber = 10^-10.0 # 100Base-T
**.*Link*.delay = replaceUnit(10m / (2 * 10^8), "s") #50ns

#WeidmÃ¼ller 5Port FE-Switch IE-SW-VL05M-5TX: 1MBit -> 105ms bei E, 10ms bei FE
#Cisco Industrial Ethernet 2000 Series, kleinste Konfiguration 4xFE: 2MB Egress -> 1667ms bei E, 167 bei FE
#Moxa EDS-505A 5xFE: 1MBit -> 105ms bei E, 10ms bei FE
#Phoenix Contact FL SWITCH SFN: 16KB/Port -> 13ms bei E, 1.3 bei FE


# Option 1: 100MBit Bottleneck
[Config NetwEthernet_100M]
extends=NetwEthernet

*Ncs.defaultLineRate = 100Mbps
*Ncs.bottleneckLineRate = ${bottleneckRate = 100.0}Mbps

*Ncs.maxQueueDelay = ${maxQueueDelay = 0.05}s
*Ncs.queueFrameLength = ${queueFrameLength = 1500}

*Ncs.mtu = ${queueFrameLength}B # tweak MTU such that fewer packets are required to saturate link.
*Ncs*.crossPacketLength = ${queueFrameLength}B
*Ncs*.crossControlPacketLength = ${queueFrameLength}B

# regular queue
*Ncs.ic*.ppp[*].queue.frameCapacity = ${queueCapacity = int(${maxQueueDelay} * ${bottleneckRate} * 10^6 / (${queueFrameLength} * 8))}
# Queues for CoCC configurations
*Ncs.ic*.ppp[*].queue.ctrlEF.frameCapacity = int(${queueCapacity} * 0.1)
*Ncs.ic*.ppp[*].queue.ctrlPriority.frameCapacity = int(${queueCapacity} * 0.4)
*Ncs.ic*.ppp[*].queue.ctrlLBE.frameCapacity = int(${queueCapacity} * 0.1)
*Ncs.ic*.ppp[*].queue.BE.frameCapacity = int(${queueCapacity} * 0.4)


# Option 2: 10MBit Bottleneck
[Config NetwEthernet_10M]
extends=NetwEthernet

*Ncs.defaultLineRate = 10Mbps
*Ncs.bottleneckLineRate = ${bottleneckRate = 10.0}Mbps

*Ncs.maxQueueDelay = ${maxQueueDelay = 0.05}s
*Ncs.queueFrameLength = ${queueFrameLength = 1500}

*Ncs.mtu = ${queueFrameLength}B # tweak MTU such that fewer packets are required to saturate link.
*Ncs*.crossPacketLength = ${queueFrameLength}B
*Ncs*.crossControlPacketLength = ${queueFrameLength}B

# regular queue
*Ncs.ic*.ppp[*].queue.frameCapacity = ${queueCapacity = int(${maxQueueDelay} * ${bottleneckRate} * 10^6 / (${queueFrameLength} * 8))}
# Queues for CoCC configurations
*Ncs.ic*.ppp[*].queue.ctrlEF.frameCapacity = int(${queueCapacity} * 0.2)
*Ncs.ic*.ppp[*].queue.ctrlPriority.frameCapacity = int(${queueCapacity} * 0.7)
*Ncs.ic*.ppp[*].queue.ctrlLBE.frameCapacity = int(${queueCapacity} * 0.0)
*Ncs.ic*.ppp[*].queue.BE.frameCapacity = int(${queueCapacity} * 0.1)


#
# Cross Traffic Setup Templates
#

[Config Cross_ControlOnly]
extends=NetwEthernet_100M

*Ncs.numCross = 0


[Config Cross_Static90M]
extends=NetwEthernet_100M

*Ncs.numCross = 1 # use one control flow to flood the network

*Ncs.xHostA[0].app.gen.startTime = ${warmupPeriod} - 1.397s # slightly start before control traffic
*Ncs.xHostA[0].app.gen.sendInterval = ${queueFrameLength}*8 / (90*10.0^6) * 1s


[Config Cross_Static80M]
extends=Cross_Static90M

*Ncs.xHostA[0].app.gen.sendInterval = ${queueFrameLength}*8 / (80*10.0^6) * 1s



#
# Mock-based Setup Templates
#

[Config Mock_Template]
extends=CoCPN

# select mock implementation and function
*.ncs*.ncsContext.configFile = "" # not used
*.ncs*.ncsContext.ncsImpl = "libncs_omnet.MockImpl.CoCpnMockNcsImpl"
#*.ncs[*].ncsContext.ncs.mockFunction = "libncs_omnet.MockImpl.LinearMockFunction"
#*.ncs[*].ncsContext.ncs.mockFunction = "libncs_omnet.MockImpl.CubicMockFunction"
*.ncs*[*].ncsContext.ncs.mockFunction = "libncs_omnet.MockImpl.StaticLQRMockFunction"
*.ncs*[*].ncsContext.ncs.function.model = 1 # LQRFit (a * qoc + b) / (qoc + c)
# long pendulum
*.ncs*[*].ncsContext.ncs.function.a = 10.71
*.ncs*[*].ncsContext.ncs.function.b = -20.83
*.ncs*[*].ncsContext.ncs.function.c = -1.044
# short pendulum
#*.ncs*[*].ncsContext.ncs.function.a = 9.503
#*.ncs*[*].ncsContext.ncs.function.b = -20.94
#*.ncs*[*].ncsContext.ncs.function.c = -1.049

*.ncs*.ncsContext.ncs.useRatePrediction = false
*.ncs*.ncsContext.autoPayloadSize = false
*.ncs*.ncsContext.payloadSize = 1400B
*.ncs*.ncsContext.ncs.controllerPayload = 1400B


[Config Mock_BigFlows]
extends=Mock_Template

*Ncs.ncs*[*].ncsContext.startupDelay = ${warmupPeriod} + 20s * index

*Ncs.ncs*[*].ncsContext.ncs.tickerFrequency = 1000Hz
*Ncs.ncs*[*].ncsContext.ncs.minPktDelayS = 2ms
*Ncs.ncs*[*].ncsContext.ncs.maxPktDelayS = 10ms
*Ncs.ncs*[*].ncsContext.ncs.maxPktDelayUtility = 0.6
# no rate prediction


[Config Mock_SmallFlows]
extends=Mock_Template

# rate equivalent to BigFlows
# 1400B @ 1000Hz : 2 Flows
# 1400B @ 100Hz  : 20 Flows
# 350B  @ 100Hz  : 80 Flows
# 350B  @ 80Hz   : 100 Flows

*.ncs*.ncsContext.autoPayloadSize = false
*.ncs*.ncsContext.payloadSize = 350B
*.ncs*.ncsContext.ncs.controllerPayload = 350B

#*Ncs.ncs*[0..49].ncsContext.startupDelay = ${warmupPeriod} + index * (473.6ms / 50)
#*Ncs.ncs*[50..99].ncsContext.startupDelay = ${warmupPeriod} + 20s + index * (519.4ms / 50)

*Ncs.ncs*[*].ncsContext.ncs.tickerFrequency = 80Hz
*Ncs.ncs*[*].ncsContext.ncs.minPktDelayS = 12.5ms
*Ncs.ncs*[*].ncsContext.ncs.maxPktDelayS = 50ms
*Ncs.ncs*[*].ncsContext.ncs.maxPktDelayUtility = 0.6


[Config Mock_BigFlows_4Prio]
extends=Mock_BigFlows

*Ncs.numNcs12 = 1
*Ncs.numNcs23 = 1
*Ncs.numNcs34 = 1
*Ncs.numNcs14 = 1

*Ncs.ncs12[0].ncsContext.ncs.tickerFrequency = 2500Hz

*Ncs.ncs23[0].ncsContext.ncs.tickerFrequency = 7000Hz

*Ncs.ncs34[0].ncsContext.offset = 0.5
*Ncs.ncs34[0].ncsContext.factor = 2
*Ncs.ncs34[0].ncsContext.ncs.tickerFrequency = 6000Hz

*Ncs.ncs14[0].ncsContext.offset = 0.25
*Ncs.ncs14[0].ncsContext.factor = 1.5
*Ncs.ncs14[0].ncsContext.ncs.tickerFrequency = 3000Hz


[Config Mock_SmallFlows_Prio]
extends=Mock_SmallFlows
*Ncs.ncs*[*].ncsContext.offset = ((parentIndex() * 71) % 99) % 6 * 0.05
*Ncs.ncs*[*].ncsContext.factor = 1.0 / (1.0 - this.offset) * (1 + ((parentIndex() * 79) % 99) % 6 * 0.05)

*Ncs.ncs*[*].ncsContext.ncs.tickerFrequency = 300Hz * (1 + (((ancestorIndex(2) * 83) % 99) % 50) / 50)


#
# Mock-based setups
#

[Config SimMock]
extends=Sim_UDP,CoCPN

# evaluation data is extracted for quasi-steady-state 10s after end of warmup 
#*.ncs*.ncsContext.pktStatisticsStartDelay = ${warmupPeriod} + 10s

*Ncs.ncs*.ncsContext.ncs.*.statistic-recording = true
*Ncs.ncs*.ncsContext.ncs.*.result-recording-modes = all

# Mocks do not send ACKs, so use forced push to full extend
*Ncs.**.actuator.coCC.regularPushFraction = 0
*Ncs.**.actuator.coCC.forcedPushFraction = 0.99

# kill all Mock randomness
*Ncs.ncs*[*].ncsContext.ncs.tickerDrift = 1.0
*Ncs.ncs*[*].ncsContext.ncs.rateJitter = 0.0
*Ncs.ncs*[*].ncsContext.ncs.qocRandomizationSpread = 0.0
*Ncs.ncs*[*].ncsContext.ncs.rateRandomizationSpread = 0.0




[Config SimCCCombined]
extends=CCCombined

*Ncs.**.monitoringCollector.relativeErrorThreshold = 0.01

*Ncs.**.serumSupport.CoCCSerumHandler.targetUtilization = 0.99#75
*Ncs.oracleCCCoordinator.targetUtilization = 0.99#75

#*Ncs.**.*CC.coexistenceMode = 2 # 0: ignore, 1: controlled, 2: reactive, 3: submission, 4: total submission
#*Ncs.**.serumSupport.CoCCSerumHandler.coexistenceMode = 2 # 0: ignore, 1: controlled, 2: reactive, 3: submission, 4: total submission
#*Ncs.oracleCCCoordinator.coexistenceMode = 2 # 0: ignore, 1: controlled, 2: reactive, 3: submission, 4: total submission

# weniger queues nutzen
*Ncs.**.*CC.coexistenceMode = 4 # 0: ignore, 1: controlled, 2: reactive, 3: submission, 4: total submission
*Ncs.**.serumSupport.CoCCSerumHandler.coexistenceMode = 4 # 0: ignore, 1: controlled, 2: reactive, 3: submission, 4: total submission
*Ncs.oracleCCCoordinator.coexistenceMode = 4 # 0: ignore, 1: controlled, 2: reactive, 3: submission, 4: total submission

*Ncs.**.*CC.qmDesired = 0.3

*Ncs.**.coCC.continousQMAdjustment = false
*Ncs.**.coCC.enableRateLimiting = false
*Ncs.**.coCC.permittedBurstSize = 700B
*Ncs.**.serumSupport.CoCCSerumHandler.enableQueueReduction = false
*Ncs.**.serumSupport.CoCCSerumHandler.acceptableQueueUtilization = 3
*Ncs.**.serumSupport.CoCCSerumHandler.queueReductionTime = 0.1s
*Ncs.**.serumSupport.CoCCSerumHandler.enableRateControl = false

#*Ncs.**.coCC.pushCompensationHorizon = -1s
#*Ncs.**.coCC.enablePushSpreading = true
*Ncs.**.coCC.enableRobustCollection = true
*Ncs.**.serumSupport.CoCCSerumHandler.enableRobustCollection = true
*Ncs.**.serumSupport.CoCCSerumHandler.bloomFlowCount = 2500

*Ncs.**.coCC.maxPushPathDelay = 0.0025s

**.controller.coCC.autoSpreading = true
**.controller.coCC.regularPushFraction = 0.3
**.controller.coCC.forcedPushFraction = 0.2


[Config MultiBottleneck_Mock_4FlowsCross]
extends=SimMock,SimCCCombined,Cross_Static80M,Mock_BigFlows_4Prio

# make cross traffic fixed, control will directly see only its own side-effects
*Ncs.ic*.ppp[*].queue.scheduler.weights = "1000 100 1000000 1" # EF, Prio, BE, LBE
*Ncs.**.*CC.qmDesired = 0.001

sim-time-limit = 44s #-5s

*Ncs.ncs14[0].ncsContext.startupDelay = ${warmupPeriod}
*Ncs.ncs14[0].ncsContext.simulationRuntime = 0s
*Ncs.ncs12[0].ncsContext.startupDelay = ${warmupPeriod} + 2s#/2
*Ncs.ncs12[0].ncsContext.simulationRuntime = 10s#/2
*Ncs.ncs23[0].ncsContext.startupDelay = ${warmupPeriod} + 4s#/2
*Ncs.ncs23[0].ncsContext.simulationRuntime = 6s#/2
*Ncs.ncs34[0].ncsContext.startupDelay = ${warmupPeriod} + 6s#/2
*Ncs.ncs34[0].ncsContext.simulationRuntime = 2s#/2

*Ncs.oracleCCCoordinator.minUpdateInterval = 0.5ms


[Config MultiBottleneck_Mock_Manyflows]
extends=SimMock,SimCCCombined,Cross_ControlOnly,Mock_SmallFlows_Prio,EvalStatisticsOnly

sim-time-limit = 44s

*Ncs.numNcs12 = 150
*Ncs.numNcs23 = 200
*Ncs.numNcs34 = 250
*Ncs.numNcs14 = 150

*Ncs.ncs14[*].ncsContext.startupDelay = ${warmupPeriod} + 0s + index * (214.6ms / 500)
*Ncs.ncs14[*].ncsContext.simulationRuntime = 0s
*Ncs.ncs12[*].ncsContext.startupDelay = ${warmupPeriod} + 2s + index * (138.4ms / 200)
*Ncs.ncs12[*].ncsContext.simulationRuntime = 10s             - index * (089.7ms / 200)
*Ncs.ncs23[*].ncsContext.startupDelay = ${warmupPeriod} + 4s + index * (109.9ms / 300)
*Ncs.ncs23[*].ncsContext.simulationRuntime = 6s              - index * (073.8ms / 300)
*Ncs.ncs34[*].ncsContext.startupDelay = ${warmupPeriod} + 6s + index * (094.1ms / 400)
*Ncs.ncs34[*].ncsContext.simulationRuntime = 2s              - index * (107.3ms / 400)

*Ncs.oracleCCCoordinator.minUpdateInterval = 0.5ms

