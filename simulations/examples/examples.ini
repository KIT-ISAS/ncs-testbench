[General]
scheduler-class = MatlabScheduler
sim-time-limit = 90s
simtime-resolution = ps
seed-set = 1

record-eventlog = false
# revert to old result naming scheme
output-vector-file = "${resultdir}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}-${runnumber}.sca"
eventlog-file = "${resultdir}/${configname}-${runnumber}.elog"
snapshot-file = "${resultdir}/${configname}-${runnumber}.sna"

# statistics recording
**.ncsContext.*.statistic-recording = true
**.ncsContext.*.result-recording-modes = all
**.controller.cps.inter_arrival_time.statistic-recording = true
**.controller.cps.inter_arrival_time.result-recording-modes = all
**.sensor.cps.inter_arrival_time.statistic-recording = true
**.sensor.cps.inter_arrival_time.result-recording-modes = all
**.actuator.cps.inter_arrival_time.statistic-recording = false

**.ncs*.contextType = "CoCpnNcsContext"
warmup-period = ${warmupPeriod = 30s} # so ncs is simulated for 60 seconds
*Ncs.ncsStartupDelay = ${warmupPeriod}
# evaluation data is extracted for quasi-steady-state 10s after end of warmup 
*.ncs*.ncsContext.pktStatisticsStartDelay = ${warmupPeriod} + 10s

# Always use UDP
**.ncs*.*.useTcp = false
**.ncs*.*.useUdp = true
# alternatively: TCP with datagram-style message wrapper
# **.ncs*.*.tcpTransport.datagramService = true 

[Config TheoreticalModel]
network = ncs_testbench.networks.TheoreticalNcs

# this config assumes a sampling interval of 0.01 s
# plant is the short pendulum
TheoreticalNcs.ncs.ncsContext.configFile = "../../../libncs_matlab/matlab/config/inverted_pendulum_short.mat"

TheoreticalNcs.ncs.ncsContext.maxSampleAge = 1s

# in seconds, results in the observed delays as given in the config
**.actorLink.pdf="0.0001:0.000001 0.005:0.85 0.015:0.007 0.025:0.007 0.035:0.007 0.045:0.007 0.055:0.007 0.065:0.007 0.075:0.007 0.085:0.007 0.095:0.007 0.105:0.007 -1:0.08"
**.sensorLink.pdf="0.0001:0.000001 0.005:0.85 0.015:0.007 0.025:0.007 0.035:0.007 0.045:0.007 0.055:0.007 0.065:0.007 0.075:0.007 0.085:0.007 0.095:0.007 0.105:0.007 -1:0.08"

**.actorLink.*.statistic-recording = true
**.actorLink.*.result-recording-modes = all
**.sensorLink.*.statistic-recording = true
**.sensorLink.*.result-recording-modes = all

*Ncs.ncs*.ncsContext.controllerClassName = "FiniteHorizonController" # designed under TCP-like assumption
*Ncs.ncs*.ncsContext.networkType = 1 # indicates TCP-like setting

[Config SimpleNetworkModel]
network = ncs_testbench.networks.SimpleNcs

# plant is the short pendulum
SimpleNcs.ncs.ncsContext.configFile = "../../../libncs_matlab/matlab/config/inverted_pendulum_short.mat"

SimpleNcs.bottleneckLineRate = ${bottleneckLineRate = 10}Mbps #100Mbps
**.*Link*.ber = 10^-10.0 # 100Base-T
**.*Link*.delay = replaceUnit(10m / (2 * 10^8), "s") #50ns
SimpleNcs.maxQueueDelay = ${maxQueueDelay = 0.1}s # fake variable to enable subsequent computations
SimpleNcs.ic*.ppp[*].queue.frameCapacity = ${queueCapacity = int(${maxQueueDelay} * ${bottleneckLineRate} * 10^6 / (1500 * 8))}
SimpleNcs.crossFlowRate = 0.99 * ${bottleneckLineRate}Mbps
SimpleNcs.crossStartTime = ${warmupPeriod} + 30s

# SimpleNcs.ncs.ncsContext.controllerClassName = "IMMBasedRecedingHorizonController"
